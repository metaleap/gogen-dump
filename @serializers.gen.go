package main

// Code generated by github.com/metaleap/gogen-dump — DO NOT EDIT.

import (
	"bytes"
	"io"
	"unsafe"

	fmt "fmt"
)

func (me *fixed) writeTo(buf *bytes.Buffer) (err error) {

	buf.Write((*[2036]byte)(unsafe.Pointer(me))[:])

	return
}

func (me *fixed) WriteTo(w io.Writer) (int64, error) {
	var buf bytes.Buffer
	if err := me.writeTo(&buf); err != nil {
		return 0, err
	}
	return buf.WriteTo(w)
}

func (me *fixed) MarshalBinary() (data []byte, err error) {
	var buf bytes.Buffer
	if err = me.writeTo(&buf); err == nil {
		data = buf.Bytes()
	}
	return
}

func (me *fixed) ReadFrom(r io.Reader) (n int64, err error) {
	var buf bytes.Buffer
	if n, err = buf.ReadFrom(r); err == nil {
		err = me.UnmarshalBinary(buf.Bytes())
	}
	return
}

func (me *fixed) UnmarshalBinary(data []byte) (err error) {

	*me = *((*fixed)(unsafe.Pointer(&data[0])))

	return
}

func (me *testStruct) writeTo(buf *bytes.Buffer) (err error) {

	var data bytes.Buffer

	{
		if err = me.embName.writeTo(&data); err != nil {
			return
		}
		l_embName := (data.Len())
		buf.Write((*[8]byte)(unsafe.Pointer(&l_embName))[:])
		data.WriteTo(buf)
	}

	buf.Write(((*[16]byte)(unsafe.Pointer(&(me.DingDong.Complex))))[:])

	buf.Write(((*[504]byte)(unsafe.Pointer(&(me.DingDong.FixedSize[0]))))[:])

	if me.Hm.Balance == nil {
		buf.WriteByte(0)
	} else {
		buf.WriteByte(1)
		for i0 := 0; i0 < 3; i0++ {
			if (*me.Hm.Balance)[i0] == nil {
				buf.WriteByte(0)
			} else {
				buf.WriteByte(1)
				if *(*me.Hm.Balance)[i0] == nil {
					buf.WriteByte(0)
				} else {
					buf.WriteByte(1)
					buf.Write(((*[2]byte)(unsafe.Pointer(*(*me.Hm.Balance)[i0])))[:])
				}
			}
		}
	}

	buf.Write(((*[8]byte)(unsafe.Pointer(&(me.Hm.Hm.AccountAge))))[:])

	l_HmꓸHmꓸLookie := (len(me.Hm.Hm.Lookie))
	buf.Write((*[8]byte)(unsafe.Pointer(&l_HmꓸHmꓸLookie))[:])
	if (l_HmꓸHmꓸLookie) > 0 {
		buf.Write((*[1125899906842623]byte)(unsafe.Pointer(&me.Hm.Hm.Lookie[0]))[:2036*(l_HmꓸHmꓸLookie)])
	}

	l_HmꓸHmꓸAny := (len(me.Hm.Hm.Any))
	buf.Write((*[8]byte)(unsafe.Pointer(&l_HmꓸHmꓸAny))[:])
	for k0, m0 := range me.Hm.Hm.Any {
		if k0 == nil {
			buf.WriteByte(0)
		} else {
			buf.WriteByte(1)
			buf.Write((*[2036]byte)(unsafe.Pointer(k0))[:])
		}
		{
			switch t := m0.(type) {
			case fixed:
				buf.WriteByte(1)
				buf.Write((*[2036]byte)(unsafe.Pointer(&t))[:])
			case *fixed:
				buf.WriteByte(2)
				if t == nil {
					buf.WriteByte(0)
				} else {
					buf.WriteByte(1)
					buf.Write((*[2036]byte)(unsafe.Pointer(t))[:])
				}
			case []fixed:
				buf.WriteByte(3)
				l_m0 := (len(t))
				buf.Write((*[8]byte)(unsafe.Pointer(&l_m0))[:])
				if (l_m0) > 0 {
					buf.Write((*[1125899906842623]byte)(unsafe.Pointer(&t[0]))[:2036*(l_m0)])
				}
			case [5][6]fixed:
				buf.WriteByte(4)
				buf.Write(((*[61080]byte)(unsafe.Pointer(&(t[0]))))[:])
			case *embName:
				buf.WriteByte(5)
				if t == nil {
					buf.WriteByte(0)
				} else {
					buf.WriteByte(1)
					{
						if err = t.writeTo(&data); err != nil {
							return
						}
						l_m0 := (data.Len())
						buf.Write((*[8]byte)(unsafe.Pointer(&l_m0))[:])
						data.WriteTo(buf)
					}
				}
			case []embName:
				buf.WriteByte(6)
				l_m0 := (len(t))
				buf.Write((*[8]byte)(unsafe.Pointer(&l_m0))[:])
				for i1 := 0; i1 < (l_m0); i1++ {
					{
						if err = t[i1].writeTo(&data); err != nil {
							return
						}
						l_i1 := (data.Len())
						buf.Write((*[8]byte)(unsafe.Pointer(&l_i1))[:])
						data.WriteTo(buf)
					}
				}
			case []*embName:
				buf.WriteByte(7)
				l_m0 := (len(t))
				buf.Write((*[8]byte)(unsafe.Pointer(&l_m0))[:])
				for i1 := 0; i1 < (l_m0); i1++ {
					if t[i1] == nil {
						buf.WriteByte(0)
					} else {
						buf.WriteByte(1)
						{
							if err = t[i1].writeTo(&data); err != nil {
								return
							}
							l_i1 := (data.Len())
							buf.Write((*[8]byte)(unsafe.Pointer(&l_i1))[:])
							data.WriteTo(buf)
						}
					}
				}
			case []*float32:
				buf.WriteByte(8)
				l_m0 := (len(t))
				buf.Write((*[8]byte)(unsafe.Pointer(&l_m0))[:])
				for i1 := 0; i1 < (l_m0); i1++ {
					if t[i1] == nil {
						buf.WriteByte(0)
					} else {
						buf.WriteByte(1)
						buf.Write(((*[4]byte)(unsafe.Pointer(t[i1])))[:])
					}
				}
			case nil:
				buf.WriteByte(0)
			default:
				return fmt.Errorf("testStruct.m0: type %T not mentioned in tagged-union field-tag", t)
			}
		}
	}

	l_HmꓸFoo := (len(me.Hm.Foo))
	buf.Write((*[8]byte)(unsafe.Pointer(&l_HmꓸFoo))[:])
	for i0 := 0; i0 < (l_HmꓸFoo); i0++ {
		for i1 := 0; i1 < 2; i1++ {
			l_i1 := (len(me.Hm.Foo[i0][i1]))
			buf.Write((*[8]byte)(unsafe.Pointer(&l_i1))[:])
			for k2, m2 := range me.Hm.Foo[i0][i1] {
				buf.Write(((*[4]byte)(unsafe.Pointer(&(k2))))[:])
				if m2 == nil {
					buf.WriteByte(0)
				} else {
					buf.WriteByte(1)
					if *m2 == nil {
						buf.WriteByte(0)
					} else {
						buf.WriteByte(1)
						if **m2 == nil {
							buf.WriteByte(0)
						} else {
							buf.WriteByte(1)
							l_m2 := (len((***m2)))
							buf.Write((*[8]byte)(unsafe.Pointer(&l_m2))[:])
							for i3 := 0; i3 < (l_m2); i3++ {
								if (***m2)[i3] == nil {
									buf.WriteByte(0)
								} else {
									buf.WriteByte(1)
									buf.Write(((*[2]byte)(unsafe.Pointer((***m2)[i3])))[:])
								}
							}
						}
					}
				}
			}
		}
	}

	if me.Age == nil {
		buf.WriteByte(0)
	} else {
		buf.WriteByte(1)
		if *me.Age == nil {
			buf.WriteByte(0)
		} else {
			buf.WriteByte(1)
			if **me.Age == nil {
				buf.WriteByte(0)
			} else {
				buf.WriteByte(1)
				if ***me.Age == nil {
					buf.WriteByte(0)
				} else {
					buf.WriteByte(1)
					buf.Write(((*[8]byte)(unsafe.Pointer(***me.Age)))[:])
				}
			}
		}
	}

	return
}

func (me *testStruct) WriteTo(w io.Writer) (int64, error) {
	var buf bytes.Buffer
	if err := me.writeTo(&buf); err != nil {
		return 0, err
	}
	return buf.WriteTo(w)
}

func (me *testStruct) MarshalBinary() (data []byte, err error) {
	var buf bytes.Buffer
	if err = me.writeTo(&buf); err == nil {
		data = buf.Bytes()
	}
	return
}

func (me *testStruct) ReadFrom(r io.Reader) (n int64, err error) {
	var buf bytes.Buffer
	if n, err = buf.ReadFrom(r); err == nil {
		err = me.UnmarshalBinary(buf.Bytes())
	}
	return
}

func (me *testStruct) UnmarshalBinary(data []byte) (err error) {

	var p int

	l_embName := (*((*int)(unsafe.Pointer(&data[p]))))
	p += 8
	if err = me.embName.UnmarshalBinary(data[p : p+l_embName]); err != nil {
		return
	}
	p += l_embName

	me.DingDong.Complex = *((*complex128)(unsafe.Pointer(&data[p])))
	p += 16

	me.DingDong.FixedSize = *((*[9][7]float64)(unsafe.Pointer(&data[p])))
	p += 504

	{
		var p0 *[3]**int16
		if p++; data[p-1] != 0 {
			v10 := [3]**int16{}
			for i0 := 0; i0 < 3; i0++ {
				{
					var p0 **int16
					var p1 *int16
					if p++; data[p-1] != 0 {
						if p++; data[p-1] != 0 {
							v21 := *((*int16)(unsafe.Pointer(&data[p])))
							p += 2
							p1 = &v21
						}
						p0 = &p1
					}
					v10[i0] = p0
				}
			}
			p0 = &v10
		}
		me.Hm.Balance = p0
	}

	me.Hm.Hm.AccountAge = *((*int)(unsafe.Pointer(&data[p])))
	p += 8

	l_HmꓸHmꓸLookie := (*((*int)(unsafe.Pointer(&data[p]))))
	p += 8
	me.Hm.Hm.Lookie = make([]fixed, l_HmꓸHmꓸLookie)
	if (l_HmꓸHmꓸLookie) > 0 {
		copy(((*[1125899906842623]byte)(unsafe.Pointer(&me.Hm.Hm.Lookie[0])))[0:2036*(l_HmꓸHmꓸLookie)], data[p:p+(2036*(l_HmꓸHmꓸLookie))])
		p += (2036 * (l_HmꓸHmꓸLookie))
	}

	l_HmꓸHmꓸAny := (*((*int)(unsafe.Pointer(&data[p]))))
	p += 8
	me.Hm.Hm.Any = make(map[*fixed]iface1, l_HmꓸHmꓸAny)
	for i0 := 0; i0 < (l_HmꓸHmꓸAny); i0++ {
		var bk0 *fixed
		var bm0 iface1
		{
			var p0 *fixed
			if p++; data[p-1] != 0 {
				v11 := *((*fixed)(unsafe.Pointer(&data[p])))
				p += 2036
				p0 = &v11
			}
			bk0 = p0
		}
		{
			t := data[p]
			p++
			switch t {
			case 1:
				var u fixed
				u = *((*fixed)(unsafe.Pointer(&data[p])))
				p += 2036
				bm0 = u
			case 2:
				var u *fixed
				{
					var p0 *fixed
					if p++; data[p-1] != 0 {
						v11 := *((*fixed)(unsafe.Pointer(&data[p])))
						p += 2036
						p0 = &v11
					}
					u = p0
				}
				bm0 = u
			case 3:
				var u []fixed
				l_m0 := (*((*int)(unsafe.Pointer(&data[p]))))
				p += 8
				u = make([]fixed, l_m0)
				if (l_m0) > 0 {
					copy(((*[1125899906842623]byte)(unsafe.Pointer(&u[0])))[0:2036*(l_m0)], data[p:p+(2036*(l_m0))])
					p += (2036 * (l_m0))
				}
				bm0 = u
			case 4:
				var u [5][6]fixed
				u = *((*[5][6]fixed)(unsafe.Pointer(&data[p])))
				p += 61080
				bm0 = u
			case 5:
				var u *embName
				{
					var p0 *embName
					if p++; data[p-1] != 0 {
						v11 := embName{}
						l_m0 := (*((*int)(unsafe.Pointer(&data[p]))))
						p += 8
						if err = v11.UnmarshalBinary(data[p : p+l_m0]); err != nil {
							return
						}
						p += l_m0
						p0 = &v11
					}
					u = p0
				}
				bm0 = u
			case 6:
				var u []embName
				l_m0 := (*((*int)(unsafe.Pointer(&data[p]))))
				p += 8
				u = make([]embName, l_m0)
				for i1 := 0; i1 < (l_m0); i1++ {
					l_i1 := (*((*int)(unsafe.Pointer(&data[p]))))
					p += 8
					if err = u[i1].UnmarshalBinary(data[p : p+l_i1]); err != nil {
						return
					}
					p += l_i1
				}
				bm0 = u
			case 7:
				var u []*embName
				l_m0 := (*((*int)(unsafe.Pointer(&data[p]))))
				p += 8
				u = make([]*embName, l_m0)
				for i1 := 0; i1 < (l_m0); i1++ {
					{
						var p0 *embName
						if p++; data[p-1] != 0 {
							v12 := embName{}
							l_i1 := (*((*int)(unsafe.Pointer(&data[p]))))
							p += 8
							if err = v12.UnmarshalBinary(data[p : p+l_i1]); err != nil {
								return
							}
							p += l_i1
							p0 = &v12
						}
						u[i1] = p0
					}
				}
				bm0 = u
			case 8:
				var u []*float32
				l_m0 := (*((*int)(unsafe.Pointer(&data[p]))))
				p += 8
				u = make([]*float32, l_m0)
				for i1 := 0; i1 < (l_m0); i1++ {
					{
						var p0 *float32
						if p++; data[p-1] != 0 {
							v12 := *((*float32)(unsafe.Pointer(&data[p])))
							p += 4
							p0 = &v12
						}
						u[i1] = p0
					}
				}
				bm0 = u
			default:
				bm0 = nil
			}
		}
		me.Hm.Hm.Any[bk0] = bm0
	}

	l_HmꓸFoo := (*((*int)(unsafe.Pointer(&data[p]))))
	p += 8
	me.Hm.Foo = make([][2]map[rune]***[]*int16, l_HmꓸFoo)
	for i0 := 0; i0 < (l_HmꓸFoo); i0++ {
		for i1 := 0; i1 < 2; i1++ {
			l_i1 := (*((*int)(unsafe.Pointer(&data[p]))))
			p += 8
			me.Hm.Foo[i0][i1] = make(map[rune]***[]*int16, l_i1)
			for i2 := 0; i2 < (l_i1); i2++ {
				var bk2 rune
				var bm2 ***[]*int16
				bk2 = *((*rune)(unsafe.Pointer(&data[p])))
				p += 4
				{
					var p0 ***[]*int16
					var p1 **[]*int16
					var p2 *[]*int16
					if p++; data[p-1] != 0 {
						if p++; data[p-1] != 0 {
							if p++; data[p-1] != 0 {
								l_m2 := (*((*int)(unsafe.Pointer(&data[p]))))
								p += 8
								v33 := make([]*int16, l_m2)
								for i3 := 0; i3 < (l_m2); i3++ {
									{
										var p0 *int16
										if p++; data[p-1] != 0 {
											v14 := *((*int16)(unsafe.Pointer(&data[p])))
											p += 2
											p0 = &v14
										}
										v33[i3] = p0
									}
								}
								p2 = &v33
							}
							p1 = &p2
						}
						p0 = &p1
					}
					bm2 = p0
				}
				me.Hm.Foo[i0][i1][bk2] = bm2
			}
		}
	}

	{
		var p0 ****uint
		var p1 ***uint
		var p2 **uint
		var p3 *uint
		if p++; data[p-1] != 0 {
			if p++; data[p-1] != 0 {
				if p++; data[p-1] != 0 {
					if p++; data[p-1] != 0 {
						v40 := *((*uint)(unsafe.Pointer(&data[p]))) /* p += 8 */
						p3 = &v40
					}
					p2 = &p3
				}
				p1 = &p2
			}
			p0 = &p1
		}
		me.Age = p0
	}

	return
}

func (me *embName) writeTo(buf *bytes.Buffer) (err error) {

	buf.Write(((*[24432]byte)(unsafe.Pointer(&(me.LeFix[0]))))[:])

	l_FirstName := (len(me.FirstName))
	buf.Write((*[8]byte)(unsafe.Pointer(&l_FirstName))[:])
	buf.WriteString(me.FirstName)

	l_MiddleNames := (len(me.MiddleNames))
	buf.Write((*[8]byte)(unsafe.Pointer(&l_MiddleNames))[:])
	for i0 := 0; i0 < (l_MiddleNames); i0++ {
		if me.MiddleNames[i0] == nil {
			buf.WriteByte(0)
		} else {
			buf.WriteByte(1)
			if *me.MiddleNames[i0] == nil {
				buf.WriteByte(0)
			} else {
				buf.WriteByte(1)
				if **me.MiddleNames[i0] == nil {
					buf.WriteByte(0)
				} else {
					buf.WriteByte(1)
					for i1 := 0; i1 < 5; i1++ {
						if (***me.MiddleNames[i0])[i1] == nil {
							buf.WriteByte(0)
						} else {
							buf.WriteByte(1)
							l_i1 := (len((*(***me.MiddleNames[i0])[i1])))
							buf.Write((*[8]byte)(unsafe.Pointer(&l_i1))[:])
							buf.WriteString((*(***me.MiddleNames[i0])[i1]))
						}
					}
				}
			}
		}
	}

	if me.LastName == nil {
		buf.WriteByte(0)
	} else {
		buf.WriteByte(1)
		if *me.LastName == nil {
			buf.WriteByte(0)
		} else {
			buf.WriteByte(1)
			l_LastName := (len((**me.LastName)))
			buf.Write((*[8]byte)(unsafe.Pointer(&l_LastName))[:])
			buf.WriteString((**me.LastName))
		}
	}

	return
}

func (me *embName) WriteTo(w io.Writer) (int64, error) {
	var buf bytes.Buffer
	if err := me.writeTo(&buf); err != nil {
		return 0, err
	}
	return buf.WriteTo(w)
}

func (me *embName) MarshalBinary() (data []byte, err error) {
	var buf bytes.Buffer
	if err = me.writeTo(&buf); err == nil {
		data = buf.Bytes()
	}
	return
}

func (me *embName) ReadFrom(r io.Reader) (n int64, err error) {
	var buf bytes.Buffer
	if n, err = buf.ReadFrom(r); err == nil {
		err = me.UnmarshalBinary(buf.Bytes())
	}
	return
}

func (me *embName) UnmarshalBinary(data []byte) (err error) {

	var p int

	me.LeFix = *((*[3][4]fixed)(unsafe.Pointer(&data[p])))
	p += 24432

	l_FirstName := (*((*int)(unsafe.Pointer(&data[p]))))
	p += 8
	me.FirstName = string(data[p : p+l_FirstName])
	p += l_FirstName

	l_MiddleNames := (*((*int)(unsafe.Pointer(&data[p]))))
	p += 8
	me.MiddleNames = make([]***[5]*string, l_MiddleNames)
	for i0 := 0; i0 < (l_MiddleNames); i0++ {
		{
			var p0 ***[5]*string
			var p1 **[5]*string
			var p2 *[5]*string
			if p++; data[p-1] != 0 {
				if p++; data[p-1] != 0 {
					if p++; data[p-1] != 0 {
						v31 := [5]*string{}
						for i1 := 0; i1 < 5; i1++ {
							{
								var p0 *string
								if p++; data[p-1] != 0 {
									l_i1 := (*((*int)(unsafe.Pointer(&data[p]))))
									p += 8
									v12 := string(data[p : p+l_i1])
									p += l_i1
									p0 = &v12
								}
								v31[i1] = p0
							}
						}
						p2 = &v31
					}
					p1 = &p2
				}
				p0 = &p1
			}
			me.MiddleNames[i0] = p0
		}
	}

	{
		var p0 **string
		var p1 *string
		if p++; data[p-1] != 0 {
			if p++; data[p-1] != 0 {
				l_LastName := (*((*int)(unsafe.Pointer(&data[p]))))
				p += 8
				v20 := string(data[p : p+l_LastName]) /* p += l_LastName */
				p1 = &v20
			}
			p0 = &p1
		}
		me.LastName = p0
	}

	return
}
