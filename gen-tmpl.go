package main

import (
	"bytes"
	"go/format"
	"io"
	"strings"
	"text/template"
)

const tmplSrc = `package {{.PName}}

// Code generated by {{.ProgHint}} â€” DO NOT EDIT.

import (
	"bytes"
	"io"
	"unsafe"
	{{range $pkgname, $pkgimppath := .Imps}}
	{{ $pkgname }} "{{$pkgimppath}}"
	{{- end}}
)

{{range .Structs}}
func (me *{{.TName}}) writeTo(buf *bytes.Buffer) (err error) {
	{{if .TmplW}}
	{{.TmplW}}
	{{else}}
	{{if .HasWData}}var data bytes.Buffer{{end}}
	{{if .HasB0Ptr}}var b0 byte ; var b0s = (*((*[1]byte)(unsafe.Pointer(&b0))))[:] {{end}}
	{{if .HasB1Ptr}}var b1 byte = 1 ; var b1s = (*((*[1]byte)(unsafe.Pointer(&b1))))[:] {{end}}
	{{range .Fields}}
	{{.TmplW}}
	{{end}}
	{{end}}
	return
}

func (me *{{.TName}}) WriteTo(w io.Writer) (int64, error) {
	var buf bytes.Buffer
	if err := me.writeTo(&buf); err != nil {
		return 0, err
	}
	return buf.WriteTo(w)
}

func (me *{{.TName}}) MarshalBinary() (data []byte, err error) {
	var buf bytes.Buffer
	if err = me.writeTo(&buf); err == nil {
		data = buf.Bytes()
	}
	return
}

func (me *{{.TName}}) UnmarshalBinary(data []byte) (err error) {
	{{if .TmplR}}
	{{.TmplR}}
	{{else}}
	var pos int
	{{range .Fields}}
	{{.TmplR}}
	{{end}}
	{{end}}
	return
}
{{end}}
`

type tmplDotFile struct {
	ProgHint string
	PName    string
	Structs  []*tmplDotStructTypeDef
	Imps     map[string]string

	allStructTypeDefsCollected bool
}

type tmplDotStructTypeDef struct {
	TName    string
	Fields   []*tmplDotField
	HasWData bool
	HasB0Ptr bool
	HasB1Ptr bool
	TmplR    string // only if fixedSize() > 0
	TmplW    string // only if fixedSize() > 0

	fixedsize int
}

func (me *tmplDotStructTypeDef) isIfaceSlice(name string) bool {
	if i := strings.Index(name, "["); i > 0 {
		name = name[:i]
		for i = range me.Fields {
			if me.Fields[i].FName == name {
				return me.Fields[i].isIfaceSlice
			}
		}
	}
	return false
}

func (me *tmplDotStructTypeDef) fixedSize() int {
	if me.fixedsize == 0 && tdot.allStructTypeDefsCollected {
		for _, fld := range me.Fields {
			if fs := fld.fixedSize(); fs < 0 {
				me.fixedsize = -1
				break
			} else if fs == 0 {
				panic("should never occur: " + me.TName + "." + fld.FName)
			} else {
				me.fixedsize += fs
			}
		}
		if me.fixedsize == 0 {
			me.fixedsize = -1
		}
	}
	return me.fixedsize
}

type tmplDotField struct {
	FName string
	TmplW string
	TmplR string

	typeIdent    string
	taggedUnion  []string
	skip         bool
	fixedsize    int
	isIfaceSlice bool
	isLast       bool
}

func (me *tmplDotField) finalTypeIdent() (typeident string) {
	typeident = me.typeIdent
	for tsyn := tSynonyms[typeident]; tsyn != ""; tsyn = tSynonyms[typeident] {
		typeident = tsyn
	}
	return
}

func (me *tmplDotField) fixedSize() int {
	if me.fixedsize == 0 && tdot.allStructTypeDefsCollected {
		me.fixedsize = -1
		mult, tn := fixedSizeArrMult(me.typeIdent)
		if tsyn, primsize := tSynonyms[tn], fixedSizeForTypeSpec(tn); primsize != 0 {
			me.fixedsize = mult * primsize
		} else {
			for _, tdstd := range tdot.Structs {
				if tdstd.TName == tsyn || tdstd.TName == tn {
					me.fixedsize = mult * tdstd.fixedSize()
					break
				}
			}
		}
	}
	return me.fixedsize
}

func genViaTmpl(file io.Writer) (err error) {
	tmpl := template.New("gen-tmpl.go")
	if _, err = tmpl.Parse(tmplSrc); err == nil {
		var buf bytes.Buffer
		if err = tmpl.Execute(&buf, &tdot); err == nil {
			src := buf.Bytes()
			if srcfmt, errfmt := format.Source(src); errfmt == nil {
				_, err = file.Write(srcfmt)
			} else {
				_, err = file.Write(src)
			}
		}
	}
	return
}
