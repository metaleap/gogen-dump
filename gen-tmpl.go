package main

import (
	"bytes"
	"go/format"
	"text/template"
)

const tmplSrc = `package {{.PName}}
// Code generated by {{.ProgHint}} â€” DO NOT EDIT.

// This file consists solely of generated (de)serialization methods for these struct types:
{{range .Structs}}// - {{.TName}}
{{end}}
import (
	"bytes"
	"io"
	"unsafe"
	{{range $pkgname, $pkg := .Imps}}{{if $pkg.Used}}
		{{ $pkgname }} "{{$pkg.ImportPath}}"{{end}}{{end}}
)

{{range .Structs}}
func (me *{{.TName}}) marshalTo(buf *bytes.Buffer) (err error) {
	{{if .TmplW}}
	{{.TmplW}}
	{{else}}
	{{if .HasWData}}var data bytes.Buffer{{end}}
	{{if .HasB0Ptr}}var b0 byte ; var b0s = (*((*[1]byte)(unsafe.Pointer(&b0))))[:] {{end}}
	{{if .HasB1Ptr}}var b1 byte = 1 ; var b1s = (*((*[1]byte)(unsafe.Pointer(&b1))))[:] {{end}}
	{{range .Fields}}
	{{.TmplW}}
	{{end}}
	{{end}}
	return
}

func (me *{{.TName}}) MarshalBinary() (data []byte, err error) {
	buf := bytes.NewBuffer(make([]byte, 0, {{.InitialBufSize}}))
	if err = me.marshalTo(buf); err == nil {
		data = buf.Bytes()
	}
	return
}

func (me *{{.TName}}) ReadFrom(r io.Reader) (n int64, err error) {
	var buf bytes.Buffer
	if n, err = buf.ReadFrom(r); err == nil {
		err = me.UnmarshalBinary(buf.Bytes())
	}
	return
}

func (me *{{.TName}}) UnmarshalBinary(data []byte) (err error) {
	{{if .TmplR}}
	{{.TmplR}}
	{{else}}
	var p int
	{{range .Fields}}
	{{.TmplR}}
	{{end}}
	{{end}}
	return
}

func (me *{{.TName}}) WriteTo(w io.Writer) (int64, error) {
	buf := bytes.NewBuffer(make([]byte, 0, {{.InitialBufSize}}))
	if err := me.marshalTo(buf); err != nil {
		return 0, err
	}
	return buf.WriteTo(w)
}
{{end}}
`

type tmplDotFile struct {
	ProgHint string
	PName    string
	Structs  []*tmplDotStruct
	Imps     map[string]*tmplDotPkgImp

	allStructTypeDefsCollected bool
}

func (me *tmplDotFile) Len() int               { return len(me.Structs) }
func (me *tmplDotFile) Less(i int, j int) bool { return me.Structs[i].TName < me.Structs[j].TName }
func (me *tmplDotFile) Swap(i int, j int)      { me.Structs[i], me.Structs[j] = me.Structs[j], me.Structs[i] }

type tmplDotPkgImp struct {
	ImportPath string
	Used       bool
}

type tmplDotStruct struct {
	TName          string
	Fields         []*tmplDotField
	HasB0Ptr       bool
	HasB1Ptr       bool
	HasWData       bool
	TmplR          string // only if fixedSize() > 0
	TmplW          string // only if fixedSize() > 0
	InitialBufSize string

	fixedsize int
}

func (me *tmplDotStruct) fixedSize() int {
	if me.fixedsize == 0 && tdot.allStructTypeDefsCollected {
		for _, fld := range me.Fields {
			if fs := fld.fixedSize(); fs < 0 {
				me.fixedsize = -1
				break
			} else if fs == 0 {
				panic("should never occur: " + me.TName + "." + fld.FName)
			} else {
				me.fixedsize += fs
			}
		}
		if me.fixedsize == 0 {
			me.fixedsize = -1
		}
	}
	return me.fixedsize
}

func (me *tmplDotStruct) ensureSizeHeur() {
	if me.InitialBufSize == "" {
		if fs := me.fixedSize(); fs > 0 {
			me.InitialBufSize = s(fs)
		} else {
			for _, tdf := range me.Fields {
				me.InitialBufSize += "+(" + tdf.sizeHeur() + ")"
			}
			me.InitialBufSize = me.InitialBufSize[1:]
		}
	}
	return
}

type tmplDotField struct {
	FName string
	TmplW string
	TmplR string

	typeIdent         string
	taggedUnion       []string
	skip              bool
	nextOneWasSkipped bool
	isLast            bool

	fixedsize           int
	fixedsizeExt        int
	fixedsizeExtNumSkip int
	sizeheur            string
}

func (me *tmplDotField) finalTypeIdent() (typeident string) {
	typeident = me.typeIdent
	for tsyn := tSynonyms[typeident]; tsyn != ""; tsyn = tSynonyms[typeident] {
		typeident = tsyn
	}
	return
}

func (me *tmplDotField) fixedSize() int {
	if me.fixedsize == 0 && tdot.allStructTypeDefsCollected {
		me.fixedsize = fixedSizeForTypeSpec(me.typeIdent)
	}
	return me.fixedsize
}

func (me *tmplDotField) sizeHeur() string {
	if me.sizeheur == "" {
		me.sizeheur = "0"
		if fs := me.fixedSize(); fs > 0 {
			me.sizeheur = s(fs)
		}
		/*
			mult, tident := fixedSizeArrMult(typeIdent)
			if tident[0] == '*' {
				heur = mult * (1 + genSizeHeuristic(tident[1:]))
			} else if (tident[0] == '[' && tident[1] == ']') || (typeIdent[0] == '[' && typeIdent[1] == ']') {
				heur = mult * (8 + genSizeHeuristic(tident[2:]))
			} else if ustr.Pref(tident, "map[") {
				heur = mult * (8 + genSizeHeuristic(""))
			} else if tident == "string" {
				heur = mult * (8 + 33)
			} else if tident == "int" || tident == "uint" || tident == "uintptr" {
				heur = mult * 8
			} else {
				for _, tdt := range tdot.Structs {
					if tdt.TName == tident {
						break
					}
				}
			}
		*/
	}
	return me.sizeheur
}

func genViaTmpl() (src []byte, err error) {
	tmpl := template.New("gen-tmpl.go")
	if _, err = tmpl.Parse(tmplSrc); err == nil {
		var buf bytes.Buffer
		if err = tmpl.Execute(&buf, &tdot); err == nil {
			src = buf.Bytes()
			if srcfmt, errfmt := format.Source(src); errfmt == nil {
				src = srcfmt
			}
		}
	}
	return
}
