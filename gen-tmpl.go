package main

import (
	"io"
	"strings"
	"text/template"
)

type tmplDotFile struct {
	ProgHint string
	PName    string
	Types    []*tmplDotType
	Imps     map[string]string
}

type tmplDotType struct {
	TName       string
	Fields      []*tmplDotField
	HasWData    bool
	HasB0Ptr    bool
	HasB1Ptr    bool
	isFixedSize bool
}

func (me *tmplDotType) isIfaceSlice(name string) bool {
	if i := strings.Index(name, "["); i > 0 {
		name = name[:i]
		for i = range me.Fields {
			if me.Fields[i].FName == name {
				return me.Fields[i].isIfaceSlice
			}
		}
	}
	return false
}

type tmplDotField struct {
	FName string
	TmplW string
	TmplR string

	typeIdent    string
	taggedUnion  []string
	skip         bool
	isIfaceSlice bool
	isFixedSize  bool
}

const tmplPkg = `package {{.PName}}

// Code generated by {{.ProgHint}} â€” DO NOT EDIT.

import (
	"bytes"
	"io"
	"unsafe"
	{{range $pkgname, $pkgimppath := .Imps}}
	{{ $pkgname }} "{{$pkgimppath}}"
	{{- end}}
)

{{range .Types}}
func (me *{{.TName}}) writeTo(buf *bytes.Buffer) (err error) {
	{{if .HasWData}}var data bytes.Buffer{{end}}
	{{if .HasB0Ptr}}var b0 byte ; var b0s = (*((*[1]byte)(unsafe.Pointer(&b0))))[:] {{end}}
	{{if .HasB1Ptr}}var b1 byte = 1 ; var b1s = (*((*[1]byte)(unsafe.Pointer(&b1))))[:] {{end}}
	{{range .Fields}}
	{{.TmplW}}
	{{end}}
	return
}

func (me *{{.TName}}) WriteTo(w io.Writer) (int64, error) {
	if data, err := me.MarshalBinary(); err == nil {
		var n int
		n, err = w.Write(data)
		return int64(n), err
	} else {
		return 0, err
	}
}

func (me *{{.TName}}) MarshalBinary() (data []byte, err error) {
	var buf bytes.Buffer
	if err = me.writeTo(&buf); err == nil {
		data = buf.Bytes()
	}
	return
}

func (me *{{.TName}}) UnmarshalBinary(data []byte) (err error) {
	var pos int
	{{range .Fields}}
	{{.TmplR}}
	{{end}}
	return
}
{{end}}
`

func genViaTmpl(file io.Writer) (err error) {
	tmpl := template.New("gen-tmpl.go")
	if _, err = tmpl.Parse(tmplPkg); err == nil {
		err = tmpl.Execute(file, &tdot)
	}
	return
}
