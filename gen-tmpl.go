package main

import (
	"bytes"
	"go/format"
	"sort"
	"strconv"
	"text/template"
)

const tmplSrc = `package {{.PName}}
// Code generated by {{.ProgHint}} - DO NOT EDIT.

// This file consists solely of generated (de)serialization methods for these {{len .Structs}} struct types:
{{range .Structs}}// - {{.TName}} (signature: {{.StructuralHash}})
{{end}}
import (
	"bytes"
	"errors"
	"io"
	"unsafe"
	{{range $pkgname, $pkg := .Imps}}{{if $pkg.Used}}
		{{ $pkgname }} "{{$pkg.ImportPath}}"{{end}}{{end}}
)

{{range .Structs}}

/* {{.TName}}:
   {{.Comment}}

   The serialization view:
{{range .Fields}}   - {{.FName}} - {{.Comment}}
{{end}}*/

func (me *{{.TName}}) marshalTo(buf *bytes.Buffer) (err error) {
	{{if .TmplW}}
	{{.TmplW}}
	{{else}}
	{{range .Fields}}
	{{.TmplW}}
	{{end}}
	{{end}}
	return
}

// MarshalBinary implements ` + "`" + `encoding.BinaryMarshaler` + "`" + ` by serializing ` + "`" + `me` + "`" + ` into ` + "`" + `data` + "`" + `.
func (me *{{.TName}}) MarshalBinary() (data []byte, err error) {
	buf := bytes.NewBuffer(make([]byte, 0, {{.InitialBufSize}}))
	if err = me.marshalTo(buf); err == nil {
		data = buf.Bytes()
	}
	return
}

func (me *{{.TName}}) unmarshalFrom(pos *int, data []byte) (err error) {
	p := *pos
	{{if .TmplR}}
	{{.TmplR}}
	{{else}}
	{{range .Fields}}
	{{.TmplR}}
	{{end}}
	{{end}}
	*pos = p
	return
}

// UnmarshalBinary implements ` + "`" + `encoding.BinaryUnmarshaler` + "`" + ` by deserializing from ` + "`" + `data` + "`" + ` into ` + "`" + `me` + "`" + `.
func (me *{{.TName}}) UnmarshalBinary(data []byte) (err error) {
	var pos0 int
	err = me.unmarshalFrom(&pos0, data)
	return
}

// ReadFrom implements ` + "`" + `io.ReaderFrom` + "`" + ` by deserializing from ` + "`" + `r` + "`" + ` into ` + "`" + `me` + "`" + `.
func (me *{{.TName}}) ReadFrom(r io.Reader) (int64, error) {
	var header [2]uint64
	n, err := io.ReadFull(r, ((*[16]byte)(unsafe.Pointer(&header[0])))[:])
	if err == nil {
		if header[0] != {{.StructuralHash}} {
			err = errors.New("{{.TName}}: incompatible signature header")
		} else {
			pos0, data := 0, make([]byte, header[1])
			if n, err = io.ReadFull(r, data); err == nil {
				err = me.unmarshalFrom(&pos0, data)
			}
			n += 16
		}
	}
	return int64(n), err
}

// WriteTo implements ` + "`" + `io.WriterTo` + "`" + ` by serializing ` + "`" + `me` + "`" + ` to ` + "`" + `w` + "`" + `.
func (me *{{.TName}}) WriteTo(w io.Writer) (n int64, err error) {
	buf := bytes.NewBuffer(make([]byte, 0, {{.InitialBufSize}}))
	if err = me.marshalTo(buf); err == nil {
		header := [2]uint64 { {{.StructuralHash}}, uint64(buf.Len()) }
		w.Write(((*[16]byte)(unsafe.Pointer(&header[0])))[:])
		n, err = buf.WriteTo(w)
		n += 16
	}
	return
}
{{end}}
`

type tmplDotFile struct {
	ProgHint string
	PName    string
	Structs  []*tmplDotStruct
	Imps     map[string]*tmplDotPkgImp

	allStructTypeDefsCollected bool
}

func (me *tmplDotFile) Len() int               { return len(me.Structs) }
func (me *tmplDotFile) Less(i int, j int) bool { return me.Structs[i].TName < me.Structs[j].TName }
func (me *tmplDotFile) Swap(i int, j int)      { me.Structs[i], me.Structs[j] = me.Structs[j], me.Structs[i] }

func (me *tmplDotFile) byName(name string) *tmplDotStruct {
	for _, tds := range me.Structs {
		if tds.TName == name {
			return tds
		}
	}
	return nil
}

type tmplDotPkgImp struct {
	ImportPath string
	Used       bool
}

type tmplDotStruct struct {
	TName          string
	Fields         []*tmplDotField
	TmplR          string // only if fixedSize() > 0 && !optNoFixedSizeCode
	TmplW          string // only if fixedSize() > 0 && !optNoFixedSizeCode
	InitialBufSize string
	StructuralHash uint64
	Comment        string

	hashInputSelf bytesBuffer
	hashInputRefs bytesBuffer

	fixedsize   int
	sizeheuring bool
}

func (me *tmplDotStruct) fixedSize() int {
	if me.fixedsize == 0 && tdot.allStructTypeDefsCollected {
		me.fixedsize = -1 // in case of recursive type structures
		isfixedsize := true
		for _, fld := range me.Fields {
			if fs := fld.fixedSize(); fs < 0 {
				isfixedsize = false
				break
			} else if fs == 0 {
				panic("should never occur, your recent changes must have introduced a bug: " + me.TName + "." + fld.FName)
			}
		}
		if isfixedsize { // so far we really just verified fixed-size-ness but to get the correct size, need to account for alignments/paddings instead of naively summing field sizes
			if me.fixedsize = int(typeSizes.Sizeof(typeObjs[me.TName])); me.fixedsize == 0 {
				me.fixedsize = -1
			}
		}
	}
	return me.fixedsize
}

func (me *tmplDotStruct) sizeHeur(exprPref string) *sizeHeuristics {
	if me.sizeheuring {
		return &sizeHeuristics{Lit: optHeuristicSizeUnknowns}
	}
	me.sizeheuring = true
	if fs := me.fixedSize(); fs > 0 {
		return &sizeHeuristics{Lit: fs}
	}
	var last *sizeHeuristics
	for _, tdf := range me.Fields {
		this := tdf.sizeHeur(exprPref)
		if last == nil {
			last = this
		} else {
			last = &sizeHeuristics{Op1: last, OpAdd: true, Op2: this}
		}
	}
	me.sizeheuring = false
	return last
}

type tmplDotField struct {
	FName   string
	TmplW   string
	TmplR   string
	Comment string

	typeIdent         string
	taggedUnion       sort.StringSlice
	skip              bool
	nextOneWasSkipped bool
	isLast            bool

	fixedsize           int
	fixedsizeExt        int
	fixedsizeExtNumSkip int
}

func (me *tmplDotField) finalTypeIdent() (typeident string) {
	typeident = me.typeIdent
	for tsyn := typeSyns[typeident]; tsyn != ""; tsyn = typeSyns[typeident] {
		typeident = tsyn
	}
	return
}

func (me *tmplDotField) fixedSize() int {
	if me.fixedsize == 0 && tdot.allStructTypeDefsCollected {
		me.fixedsize = fixedSizeForTypeSpec(me.typeIdent)
	}
	return me.fixedsize
}

func (me *tmplDotField) sizeHeur(exprPref string) *sizeHeuristics {
	if fs := me.fixedSize(); fs > 0 {
		return &sizeHeuristics{Lit: fs}
	} else {
		if exprPref != "" {
			exprPref += me.FName
		}
		return typeSizeHeur(me.finalTypeIdent(), exprPref)
	}
}

func genViaTmpl() (src []byte, err error) {
	tmpl := template.New("gen-tmpl.go")
	if _, err = tmpl.Parse(tmplSrc); err == nil {
		var buf bytes.Buffer
		if err = tmpl.Execute(&buf, &tdot); err == nil {
			src = buf.Bytes()
			if srcfmt, errfmt := format.Source(src); errfmt == nil {
				src = srcfmt
			} else {
				println("be warned! the generated code could not be formatted, so it won't compile either:\n\t" + errfmt.Error())
			}
		}
	}
	return
}

type sizeHeuristics struct {
	Expr  string
	Lit   int
	OpMul bool
	OpAdd bool
	Op1   *sizeHeuristics
	Op2   *sizeHeuristics
}

func (me *sizeHeuristics) isLit() bool {
	return (!me.OpAdd) && (!me.OpMul) && me.Expr == ""
}

func (me *sizeHeuristics) reduce() *sizeHeuristics {
	if me.Op1 != nil && me.Op2 != nil {
		me.Op1, me.Op2 = me.Op1.reduce(), me.Op2.reduce()
		l1, l2 := me.Op1.Lit, me.Op2.Lit
		o1, o2 := me.Op1.isLit(), me.Op2.isLit()
		switch {
		case me.OpMul:

			if l1 == 1 {
				return me.Op2
			} else if l2 == 1 {
				return me.Op1
			} else if (o1 && l1 == 0) || (o2 && l2 == 0) {
				return &sizeHeuristics{}
			} else if o1 && o2 {
				return &sizeHeuristics{Lit: l1 * l2}
			}
		case me.OpAdd:
			if o1 && l1 == 0 {
				return me.Op2
			} else if o2 && l2 == 0 {
				return me.Op1
			} else if o1 && o2 {
				return &sizeHeuristics{Lit: l1 + l2}
			}
		}
	}
	return me
}

func (me *sizeHeuristics) String() string {
	switch {
	case me.isLit():
		return strconv.Itoa(me.Lit)
	case me.Expr != "":
		return me.Expr
	case me.OpMul:
		return "(" + me.Op1.String() + " * " + me.Op2.String() + ")"
	case me.OpAdd:
		return "(" + me.Op1.String() + " + " + me.Op2.String() + ")"
	}
	panic("forgot a case in switch?!")
}
